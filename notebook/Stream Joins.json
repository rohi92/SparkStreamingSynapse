{
	"name": "Stream Joins",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "SparkStream",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"runAsWorkspaceSystemIdentity": false,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "f0a5b91f-3bae-43cb-a27d-9923436463b6"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/63f17b4d-2366-4da7-94bf-60fc3d60e3d7/resourceGroups/rohithAmazeRG/providers/Microsoft.Synapse/workspaces/synapsestreaming/bigDataPools/SparkStream",
				"name": "SparkStream",
				"type": "Spark",
				"endpoint": "https://synapsestreaming.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/SparkStream",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.3",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "markdown",
				"source": [
					"# NOTE\n",
					"\n",
					"For Spark 3 Cosmos DB connector has slightly different configuration. Please select different snippest if a Spark 3.1 + pool is attached."
				]
			},
			{
				"cell_type": "code",
				"source": [
					"# Load a streaming Spark DataFrame from a Cosmos DB container\n",
					"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\n",
					"\n",
					"# For Spark 2.4\n",
					"# dfStream = spark.readStream\\\n",
					"#     .format(\"cosmos.oltp\")\\\n",
					"#     .option(\"spark.synapse.linkedService\", \"CosmosDbNoSql1\")\\\n",
					"#     .option(\"spark.cosmos.container\", \"orders\")\\\n",
					"#     .option(\"spark.cosmos.changeFeed.readEnabled\", \"true\")\\\n",
					"#     .option(\"spark.cosmos.changeFeed.startFromTheBeginning\", \"true\")\\\n",
					"#     .option(\"spark.cosmos.changeFeed.checkpointLocation\", \"/localReadCheckpointFolder\")\\\n",
					"#     .option(\"spark.cosmos.changeFeed.queryName\", \"streamQuery\")\\\n",
					"#     .load()\n",
					"\n",
					"# For Spark 3.1 +\n",
					"dfStream = spark.readStream\\\n",
					"    .format(\"cosmos.oltp.changeFeed\")\\\n",
					"    .option(\"spark.synapse.linkedService\", \"CosmosDbNoSql1\")\\\n",
					"    .option(\"spark.cosmos.container\", \"orders\")\\\n",
					"    .option(\"spark.cosmos.changeFeed.startFrom\", \"Beginning\")\\\n",
					"    .option(\"spark.cosmos.changeFeed.mode\", \"Incremental\")\\\n",
					"    .load()"
				],
				"execution_count": 42
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from   pyspark.sql.functions import * \r\n",
					"from pyspark.sql import *\r\n",
					"from delta.tables import *"
				],
				"execution_count": 43
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream"
				],
				"execution_count": 44
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream=dfStream.withColumn(\"Order_Date\",to_date(\"Order_Timestamp\"))"
				],
				"execution_count": 45
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream=dfStream.withColumn(\"Order_Timestamp\",to_timestamp(\"Order_Timestamp\"))"
				],
				"execution_count": 46
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream"
				],
				"execution_count": 47
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream1=dfStream.withWatermark('Order_Timestamp', '10 minutes').groupBy(\"Item_Id\",\"Order_Date\",window(\"Order_Timestamp\",\"6 minutes\")).agg(sum(\"qty\")).alias(\"sum_qty\")"
				],
				"execution_count": 48
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream1=dfStream1.withColumnRenamed(\"sum(qty)\",\"sum_qty\")"
				],
				"execution_count": 49
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream1=dfStream1.withColumn(\"window_Start_Time\",expr(\"window.start\"))\r\n",
					"dfStream1=dfStream1.withColumn(\"window_end_Time\",expr(\"window.end\"))"
				],
				"execution_count": 50
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Load a streaming Spark DataFrame from a Cosmos DB container\r\n",
					"# To select a preferred list of regions in a multi-region Cosmos DB account, add .option(\"spark.cosmos.preferredRegions\", \"<Region1>,<Region2>\")\r\n",
					"\r\n",
					"# For Spark 2.4\r\n",
					"# dfStream = spark.readStream\\\r\n",
					"#     .format(\"cosmos.oltp\")\\\r\n",
					"#     .option(\"spark.synapse.linkedService\", \"CosmosDbNoSql1\")\\\r\n",
					"#     .option(\"spark.cosmos.container\", \"orders\")\\\r\n",
					"#     .option(\"spark.cosmos.changeFeed.readEnabled\", \"true\")\\\r\n",
					"#     .option(\"spark.cosmos.changeFeed.startFromTheBeginning\", \"true\")\\\r\n",
					"#     .option(\"spark.cosmos.changeFeed.checkpointLocation\", \"/localReadCheckpointFolder\")\\\r\n",
					"#     .option(\"spark.cosmos.changeFeed.queryName\", \"streamQuery\")\\\r\n",
					"#     .load()\r\n",
					"\r\n",
					"# For Spark 3.1 +\r\n",
					"dfStream2 = spark.readStream\\\r\n",
					"    .format(\"cosmos.oltp.changeFeed\")\\\r\n",
					"    .option(\"spark.synapse.linkedService\", \"CosmosDbNoSql1\")\\\r\n",
					"    .option(\"spark.cosmos.container\", \"Stockitems\")\\\r\n",
					"    .option(\"spark.cosmos.changeFeed.startFrom\", \"Beginning\")\\\r\n",
					"    .option(\"spark.cosmos.changeFeed.mode\", \"Incremental\")\\\r\n",
					"    .load()"
				],
				"execution_count": 51
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream1"
				],
				"execution_count": 52
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream2"
				],
				"execution_count": 53
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream2=dfStream2.withColumnRenamed(\"item_id\",\"item_id_refill\")"
				],
				"execution_count": 54
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream2=dfStream2.withColumn(\"refill_timestamp\",to_timestamp(\"refill_timestamp\"))"
				],
				"execution_count": 55
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream2=dfStream2.withColumn(\"refill_date\",to_date(\"refill_timestamp\"))"
				],
				"execution_count": 56
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream2"
				],
				"execution_count": 57
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream2=dfStream2.withWatermark('refill_timestamp', '10 minutes').groupBy(\"Item_Id_refill\",\"refill_date\",window(\"refill_timestamp\",\"6 minutes\")).agg(sum(\"stock_Refill_qty\")).alias(\"stock_Refill_qty\")"
				],
				"execution_count": 58
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream2=dfStream2.withColumn(\"stock_start_window\",expr(\"window.start\"))\r\n",
					"dfStream2=dfStream2.withColumn(\"stock_end_window\",expr(\"window.end\"))"
				],
				"execution_count": 59
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream3=dfStream1.join(dfStream2,expr(\"Item_Id_refill=item_id and refill_date= Order_Date and stock_start_window= window_Start_Time and window_end_Time=stock_end_window  \" ))"
				],
				"execution_count": 60
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"dfStream3.writeStream.outputMode(\"complete\").format(\"delta\").option(\"path\",\"abfss://streamsynapse@synapasestream.dfs.core.windows.net/synapse/workspaces/streamoutput/join_output\").option(\"checkpointLocation\",\"abfss://streamsynapse@synapasestream.dfs.core.windows.net/synapse/workspaces/join_output/\").start()"
				],
				"execution_count": 61
			}
		]
	}
}